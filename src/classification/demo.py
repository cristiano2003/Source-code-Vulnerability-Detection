import os
from model.model import Model
import torch
from transformers import AutoTokenizer
import streamlit as st

st.title("Vulnerability Detection in Source Code")


model = Model()
#take the latest checkpoint from CodeBert.ckpt.zip file
checkpoint_path = "src/classification/CodeBert.ckpt"

if os.path.exists(checkpoint_path):
    checkpoint = torch.load(checkpoint_path)
    model.load_state_dict(checkpoint)
    model.eval()
    if torch.cuda.is_available():
        model.cuda()
    else:
        model.cpu()
else:
    print(f"Checkpoint file '{checkpoint_path}' not found.")

tokenizer = AutoTokenizer.from_pretrained("microsoft/codebert-base")

def predict_code(code):
    code = tokenizer(code, return_tensors="pt", max_length=512, truncation=True, padding="max_length")
    code = {k: v.cuda() for k, v in code.items()} if torch.cuda.is_available() else code
    output = model(**code)
    return output

code = st.text_area("Enter your code here")
if st.button("Predict"):
    output = predict_code(code)
    prediction = torch.argmax(output.logits).item()
    if prediction == 0:
        st.error("The code is vulnerable.")
    else:
        st.success("The code is not vulnerable.")
